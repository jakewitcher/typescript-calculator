{"version":3,"sources":["computations.ts","index.ts"],"names":[],"mappings":";AAoBA,aAhBA,IAAI,EAKA,EAKA,EAKA,EACJ,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAIS,QAAA,IAAA,EAnBT,QAAA,IAAA,EAAM,SAAS,EAAG,GACT,OAAA,EAAI,GAkBC,QAAA,SAAA,EAdd,QAAA,SAAA,EAAW,SAAS,EAAG,GACd,OAAA,EAAI,GAaW,QAAA,SAAA,EATxB,QAAA,SAAA,EAAW,SAAS,EAAG,GACd,OAAA,EAAI,GAQqB,QAAA,OAAA,EAJlC,QAAA,OAAA,EAAS,SAAS,EAAG,GACZ,OAAA,EAAI;;AC0EZ,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IA/FD,IAKI,EALJ,EAAA,QAAA,uBAGI,EAAmB,GACnB,EAAoB,GAElB,EAAU,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAC7D,EAAY,CAChB,CAAE,GAAI,EAAA,IAAK,IAAK,KAChB,CAAE,GAAI,EAAA,SAAU,IAAK,KACrB,CAAE,GAAI,EAAA,SAAU,IAAK,UACrB,CAAE,GAAI,EAAA,OAAQ,IAAK,YAIf,EAAU,SAAS,eAAe,WAClC,EAAgB,SAAS,eAAe,kBACxC,EAAkB,SAAS,eAAe,oBAC1C,EAAiB,SAAS,eAAe,mBACzC,EAAc,SAAS,eAAe,SAM5C,SAAS,EAAkB,EAAa,GAClC,GAAA,EAAI,OAAS,EAAG,CACZ,IAAA,EAAS,EAAI,OAAO,EAAI,aAEvB,OADN,EAAwB,YAAc,EAChC,EAEF,OAAA,EA6BT,SAAS,EAAa,GACnB,EAAwB,YAAc,EACvC,EAAW,EACX,EAAY,GAGd,SAAS,EAAY,GAClB,EAAwB,YAAc,EACvC,EAAW,GACX,EAAY,GACZ,OAAW,EAhDZ,EAAwB,YAAc,IAYvC,EAAQ,QAAQ,SAAA,GACR,IAAA,EAAM,SAAS,cAAc,UACnC,EAAI,YAAc,EAAI,WACtB,EAAI,UAAY,wBAChB,EAAI,iBAAiB,QAAS,gBACX,IAAb,EACF,EAAW,EAAkB,EAAU,GAEvC,EAAY,EAAkB,EAAW,KAG5C,EAA8B,aAAa,EAAK,KAInD,EAAU,QAAQ,SAAA,GACV,IAAA,EAAM,SAAS,cAAc,UACnC,EAAI,UAAY,EAAG,IACnB,EAAI,UAAY,0BAChB,EAAI,iBAAiB,QAAS,WAC5B,EAAW,EAAG,KAEf,EAAgC,YAAY,KAiB9C,EAAqC,iBAAiB,QAAS,WAC1D,GAAA,GAAY,GAAa,EACvB,GAAc,MAAd,GAAqB,IAAa,EAAA,OACpC,EAAY,WACP,CACD,IAAA,EAAU,EACZ,WAAW,GACX,WAAW,IACX,WACE,EAAO,QAAU,EACnB,EAAa,GACJ,EAAO,SAAS,KAEzB,EADA,EAAS,EAAO,MAAM,EAAG,IAGzB,EAAY,UAOnB,EAAkC,iBAAiB,QAAS,WAC3D,EAAY","file":"src.195c9d5d.map","sourceRoot":"..\\src","sourcesContent":["export interface Operator {\n  (a: number, b: number): number;\n}\n\nlet add: Operator;\nadd = function(a, b) {\n  return a + b;\n};\n\nlet subtract: Operator;\nsubtract = function(a, b) {\n  return a - b;\n};\n\nlet multiply: Operator;\nmultiply = function(a, b) {\n  return a * b;\n};\n\nlet divide: Operator;\ndivide = function(a, b) {\n  return a / b;\n};\n\nexport { add, subtract, multiply, divide };\n","import { add, subtract, multiply, divide, Operator } from '../src/computations';\n\n// state\nlet firstVal: string = '';\nlet secondVal: string = '';\nlet operator: Operator | undefined;\nconst numbers = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '.'];\nconst operators = [\n  { fn: add, sym: '+' },\n  { fn: subtract, sym: '-' },\n  { fn: multiply, sym: '&times' },\n  { fn: divide, sym: '&divide' },\n];\n\n// elements\nconst display = document.getElementById('display');\nconst numberButtons = document.getElementById('number-buttons');\nconst operatorButtons = document.getElementById('operator-buttons');\nconst equalsOperator = document.getElementById('equals-operator');\nconst clearButton = document.getElementById('clear');\n\n// initialize display\n(display as HTMLElement).textContent = '0';\n\n// create buttons for each number value\nfunction handleValueChange(val: string, ele: HTMLElement): string {\n  if (val.length < 6) {\n    const newVal = val.concat(ele.textContent as string);\n    (display as HTMLElement).textContent = newVal;\n    return newVal;\n  }\n  return val;\n}\n\nnumbers.forEach(num => {\n  const ele = document.createElement('button');\n  ele.textContent = num.toString();\n  ele.className = 'button button--number';\n  ele.addEventListener('click', () => {\n    if (operator === undefined) {\n      firstVal = handleValueChange(firstVal, ele);\n    } else {\n      secondVal = handleValueChange(secondVal, ele);\n    }\n  });\n  (numberButtons as HTMLElement).insertBefore(ele, clearButton);\n});\n\n// create buttons for each operator\noperators.forEach(op => {\n  const ele = document.createElement('button');\n  ele.innerHTML = op.sym;\n  ele.className = 'button button--operator';\n  ele.addEventListener('click', () => {\n    operator = op.fn;\n  });\n  (operatorButtons as HTMLElement).appendChild(ele);\n});\n\n// create button for equals\nfunction handleResult(result: string) {\n  (display as HTMLElement).textContent = result;\n  firstVal = result;\n  secondVal = '';\n}\n\nfunction handleReset(displayMsg: string) {\n  (display as HTMLElement).textContent = displayMsg;\n  firstVal = '';\n  secondVal = '';\n  operator = undefined;\n}\n\n(equalsOperator as HTMLButtonElement).addEventListener('click', () => {\n  if (firstVal && secondVal && operator) {\n    if (secondVal === '0' && operator === divide) {\n      handleReset('err');\n    } else {\n      let result = (operator as Operator)(\n        parseFloat(firstVal),\n        parseFloat(secondVal),\n      ).toString();\n      if (result.length <= 6) {\n        handleResult(result);\n      } else if (result.includes('.')) {\n        result = result.slice(0, 7);\n        handleResult(result);\n      } else {\n        handleReset('err');\n      }\n    }\n  }\n});\n\n// create button to clear all\n(clearButton as HTMLButtonElement).addEventListener('click', () => {\n  handleReset('0');\n});\n"]}